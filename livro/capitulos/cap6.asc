[[cap6]]
== Introdução a Grafos e Árvores

*Nosso objetivo, neste capítulo*, é que você seja introduzido aos conceito básicos sobre árvores e grafos, começando a desenvolver a capacidade de modelar problemas reais por meio deles, e capacitando-o a acompanhar disciplinas posteriores que o habilitarão a modelar mais complexos problemas reais usando tais ferramentas, e resolvê-los usando os algoritmos mais apropriados. Por falta de tempo, de espaço no livro, e de sua maior experiência com linguagens de programação, deixaremos a maioria dos tais algoritmos mais interessantes (e difíceis) para quando você fizer as disciplinas _Estruturas de Dados_, _Redes de Computadores_, e, talvez como ouvinte, alguma disciplina na linha de _Análise_ (da complexidade) e _Projeto de Algoritmos_, do Bacharelado em Ciência da Computação, da UFPB. 

.Sempre vamos repetir
[TIP]
====
Estamos torcendo por você. O fórum de alunos, os tutores, e eu (o professor) queremos e vamos ajudá-lo (nessa ordem), mas você tem que ser determinado e disciplinado, *cada semana dedicando 4 a 8 horas para estudar este livro*.
====

.Conteúdo deste capítulo
____________________
* Motivação e Introdução 
* Conceitos Básicos de Grafos e Digrafos
* Percursos em Grafos em Geral e em Cliques 
* Árvores e Árvores Geradoras
____________________

[NOTE]
====
Agradecemos a permissão do _Prof. Dr. Lucídio dos Anjos Formiga Cabral_  (DCC/ CI/ UFPB) para usarmos grande parte das 2 primeiras aulas de seu curso ``_Introdução à Teoria dos Grafos_'', que brevemente voltará a ser disponibilizado na Internet. Mas acrescentamos alguns problemas a resolver e alguns exemplos, e ocasionalmente mudamos algumas figuras (ou copiamos de fontes tais como Professora Sílvia Fernanda Martins Brandão da Uber http://www.uber.com.br/silvia/MATD/, e outras.), omitimos, ou acrescentamos algumas coisas. Se você quiser ver o assunto mais explicada e profundamente, não precisará de mais que os livros textos da ementa da disciplina. Mas há muitos e bons livros somente sobre grafos, alguns deles na Internet. http://www.ime.usp.br/\~pf/teoriadosgrafos/texto/TeoriaDosGrafos.pdf (``_Uma Introdução Sucinta à Teoria dos Grafos_'', _Wakabayashi- Kohayakawa- Feofiloff_) , http://www.slideshare.net/biancamcdantas/introduo-teoria-dos-grafos , http://www.ime.usp.br/\~pf/grafos-exercicios/ , http://www.utm.edu/departments/math/graph/glossary.html , http://www.iro.umontreal.ca/\~hahn/IFT3545/GTWA.pdf (_Graph Theory with Applications - Bondy- Murty_). Creditamos alguns dos exemplos e exercícios ao _Prof. Christopher Strobel_ e ao _Prof. Antônio Alfredo Ferreira Loureiro_.
====

=== Motivação e Introdução

Por que estudar grafos? Porque são:

* Importante ferramenta matemática com aplicação em diversas áreas do conhecimento;
* Utilizados na definição e/ou resolução de problemas;
* Existem centenas de problemas computacionais que empregam grafos com sucesso.

Primeiras motivações na área:

* 1735, o Problema das 7 Pontes de Konigsberg (atual Kaliningrad): Duas ilhas A e D, existentes no rio Pregel em Königsberg (Rússia), foram ligadas às margens do rio (B e C) através de 7 pontes. É possível iniciar uma caminhada a partir de um dos blocos de terra (A, B, C ou D), passar por cada uma das pontes exatamente uma vez, e voltar ao ponto de partida sem nadar pelo rio?

[width="100%",cols="^,^",frame="none",grid="none"]
|====
|image:images/cap6/img01.eps[width="130"]
|image:images/cap6/img02.eps[width="100"]
|====

Resolvido pelo estudo da paridade dos nós: O problema não tem solução porque tem vértices com paridade ímpar (os termos serão definidos mais adiante, mas adiantamos que isto significa que há vértices com número ímpar de arcos incidentes).

* 1847: G.R.Kirchnoff desenvolveu a teoria de árvores para trabalhar com aplicações em circuitos elétricos.
* 1852: F. Guthrie apresentou informalmente o problema das 4 cores: São apenas 4 cores suficientes para colorir qualquer mapa em superfície plana (fronteiras têm que ser linhas contínuas com comprimento maior que 0: não podem ser apenas um ponto), de maneira que regiões fronteiriças recebam cores distintas? (Isto só conseguiu ser provado em latexmath:[$\geq$] 1976).
* 1859: Sir W.R. Hamilton inventou um jogo que consistia em um dodecaedro com 12 faces e 20 vértices, com cada face sendo um pentágono regular e três arestas se encontrando em cada vértice e os vértices foram rotulados com nomes de 20 cidades importantes. O objetivo do jogo é achar uma rota pelas arestas do dodecaedro passando por cada vértice apenas uma vez. (A solução para este problema específico é fácil de se obter. No entanto, ainda não se tem uma condição necessária e suficiente para se verificar a existência de um ciclo hamiltoniano (definição mais adiante) em um grafo arbitrário.)
* Depois desta época pouca coisa foi investigada em Teoria dos Grafos por quase um século.
* O interesse ressurgiu na década de 20 com os estudos de D. König que se transformaram em um livro, publicado em 1936.

.Problema das Utilidades
[NOTE]
====
[width="100%", cols="^.^a,<.^", frame="none",grid="none"]
|====
| G          E          W
  
  
  
 A          B          C
|Considere 3 casas (A,B,C), cada uma com três utilidades: água (W), gás (G) e eletricidade (E). As utilidades estão conectadas às casas por meio de fios e canos. Considerando que todos os fios e canos estão no mesmo plano, é possível fazer as instalações sem cruzá-los?
|====
====

=== Conceitos Básicos de Grafos e Digrafos

Um *grafo* latexmath:[$G$] é um objeto matemático constituído por um par latexmath:[$(V,E)$], onde latexmath:[$V$] é um conjunto de elementos chamados de *vértices* (ou *nodos*) (que modelam locais ou estados ou tempos ou entidades, de problemas reais) e latexmath:[$E$] é um conjunto de elementos chamados de *arestas* (ou *arcos*), cada aresta latexmath:[$e_k$] modelando a relação de um vértice latexmath:[$v_i$] para um vértice latexmath:[$v_j$], ditos *extremos* de latexmath:[$e_k$]. Os vértices extremos de uma aresta são ditos incidentes nela, e as arestas que se ligam a um vértice são ditas *incidentes* nele. Dois vértices que são incidentes a uma (i.é, estão ligados a uma) mesma aresta são ditos *vértices adjacentes*. Duas arestas que são incidentes a um mesmo vértice são ditas *arestas adjacentes*.

.{zwsp}
====
[width="100%", cols="^.^,<.^", frame="none",grid="none"]
|====
|image:images/cap6/img03.eps[width="100"]
|latexmath:[$G = (V,E)$]                               (grafo)

latexmath:[$V = {1, 2, 3, 4, 5, 7}$]               (vértices)

latexmath:[$E = {a, b, c, d, e, f}$]                (arcos)

5,7 são os extremos da aresta latexmath:[$a$].

5,7 são incidentes na aresta latexmath:[$a$];    latexmath:[$a,d$] são incidentes no vértice 5.

latexmath:[$a,d$] são arestas adjacentes;    5,7 são vértices adjacentes.
|====
====

.{zwsp}
[NOTE]
====
image::images/cap6/img04.eps[scaledwidth="30%"]

* Um grafo latexmath:[$G = (V, E)$] (como o acima) é um *multigrafo* se existem mais de uma aresta ligando o mesmo par de vértices.
* Uma aresta do tipo latexmath:[${v_i,v_i}$] é denominada auto-laço. 
* Arestas que possuem os mesmos vértices extremos latexmath:[$v_i \not= v_j$] são ditas paralelas ou múltiplas.
* Um grafo (como o anterior) sem auto-laços nem arestas paralelas é denominado *grafo simples*.
====

* O número de arestas incidentes a um vértice latexmath:[$v$] é denominado *grau* (latexmath:[$v$]) (ou *valência*) e representado por latexmath:[$d(v)$]. (No multigrafo acima, latexmath:[$d(4) = 5$].) O grau de um vértice isolado é 0.
* latexmath:[$\delta(G)$] é o *grau mínimo* de latexmath:[$G$], o grau do vértice de menor grau. (No multigrafo acima, é 2.)
* latexmath:[$\Delta(G)$] é o *grau máximo* de latexmath:[$G$], o grau do vértice de maior grau. (No multigrafo acima, é 5.)

* *Vértice isolado* é o vértice que não possui arestas incidentes (tem grau 0). 
* *Vértice folha* (nomenclatura melhor que vértice terminal) é o vértice que possui grau 1 (Em um digrafo será grau de entrada 1 e grau de saída 0). 
* *Vizinhos* de um vértice são os vértices adjacentes a ele. (No grafo acima, 3 e 4 são vizinhos.)
* Pares de vértices (ou de arestas) não adjacentes são denominadas *independentes*. (No grafo acima, qualquer uma das arestas de 3 para 4, e a aresta de 1 para 2, são independentes entre si.)
* Um conjunto de vértices (ou arestas) é *independente* se nenhum par de seus elementos é adjacente.

Teorema:: Seja G = (V,E) um grafo simples com n vértices e m arestas. Então latexmath:[$\sum_{v \in V}{d(V)} = 2m$]

Prova::
Cada aresta e é incidente em dois vértices latexmath:[$u$] e latexmath:[$v$], sendo contabilizada no cômputo do grau de latexmath:[$u$] e também de latexmath:[$v$].

* *Auto-laço* é uma aresta com extremos idênticos latexmath:[$(u,u)$]. *Link* é uma aresta com extremos diferentes latexmath:[$v_i \not= v_j$]. Portanto, arestas múltiplas são links com mesmos extremos: 
* Um grafo é *simples* se não possuir auto-laço nem arestas múltiplas.

{zwsp} +
*Classes Especiais de Grafos:*

* *Grafo completo* de latexmath:[$n$] vértices (também chamado de *n-clique*) é um grafo simples em que cada um dos seus latexmath:[$n$] vértices se liga por 1 aresta a todos os outros latexmath:[$n-1$] vértices, cada vértice tendo grau latexmath:[$n-1$]. (O grafo abaixo é um 5-clique) Obviamente, o número de arcos é latexmath:[$n(n-1)/2$].

image::images/cap6/img05.eps[scaledwidth="30%"]

* *Grafo vazio* é um grafo sem arestas.
* *Grafo trivial* é um grafo com apenas um vértice.
* *Grafo bipartido* é aquele em que o conjunto de vértices pode ser particionado em dois subconjuntos latexmath:[$X$] e latexmath:[$Y$], tal que cada aresta do grafo tem um extremo em latexmath:[$X$] e o outro em latexmath:[$Y$]. No exemplo ao lado, latexmath:[$X (Y)$] é o conjunto dos vértices vermelhos (azuis), os quais ficam na parte superior (inferior) do grafo.
* *Grafo bipartido completo:* é um grafo bipartido com bipartição latexmath:[$(X, Y)$] em que cada vértice de latexmath:[$X$] é adjacente a cada um de todos os vértices de latexmath:[$Y$]. (Exemplo abaixo). Se chamarmos latexmath:[$|X|$] de latexmath:[$m$] e latexmath:[$|Y|$] de latexmath:[$n$], então denotamos tal grafo por latexmath:[$K_{m,n}$]. (O exemplo acima é um grafo latexmath:[$K_(4,5)$].)

image::images/cap6/img06.eps[scaledwidth="10%]

* *Grafo k-partido*: existe uma partição latexmath:[$P = \{Y_i | i = 1, \cdots , k, Y_i \cap Y_j = \emptyset, i \not= j\}$] do seu conjunto de vértices, tal que não existam ligações entre elementos de um mesmo latexmath:[$Y_i$].
* *Grafo regular* é aquele em que todos os vértices têm mesmo grau. Se o grau for latexmath:[$k$], chamamos o grafo de k-regular. (Exemplo: o grafo bipartido completo, acima, é 4-regular)
* *Grafo rotulado* em vértices (ou arestas) é aquele em que cada vértice (ou aresta) é atribuído um rótulo tal como Brasília (ou Ponte da Amizade) que será seu nome. (Exemplo: o primeiro grafo desta seção é rotulado nos vértices (1, 2, etc.), e também é rotulado nas arestas (latexmath:[$a, b,$] etc.))
* *Grafo valorado* é aquele em que cada aresta (ou vértice) tem um número real associado a ele, representando um custo ou ganho em se passar por ele. (Exemplos bem mais abaixo, nas definições de problema do caminho mais curto e da árvore geradora mínima.)
* *Grafo altamente irregular* é aquele em que cada um de seus vértices é adjacente a vértices de graus diferentes entre si.
* Dado um grafo latexmath:[$G$], seu grafo *complementar* latexmath:[$\bar{G} $] é o grafo que contém as ligações que não estão em latexmath:[$G$].

image::images/cap6/img07.eps[scaledwidth="60%"]

.Note que:
[NOTE]
====
* O complementar de um grafo sem arestas é um grafo completo e vice versa.
* Um conjunto de vértices independentes em um grafo é um clique no grafo complementar e vice versa.
====

* Um grafo é dito *conexo* se houver um caminho entre quaisquer dois de seus vértices, 

image::images/cap6/img08.eps[scaledwidth="30%"]

* E é dito *desconexo* se não houver um caminho entre quaisquer dois de seus vértices. 

image::images/cap6/img09.eps[scaledwidth="30%"]

Um grafo desconexo é formado por pelo menos dois subgrafos conexos, disjuntos em relação aos vértices. Cada um destes subgrafos conexos é dito ser uma *componente conexa* do grafo.

image::images/cap6/img10.eps[scaledwidth="30%"]

Um vértice é chamado de um *vértice de corte* se sua remoção (juntamente com as arestas a ele conectadas) aumenta o número de componentes conexas (ver definição acima) do grafo. Isto é, a remoção de um vértice de corte faz com que um (sub)grafo que era conexo fique dividido em dois ou mais (sub-)subgrafos, cada um conexo em relação a si mesmo, mas sem ligação de um para os outros. Exemplo: o vértice 4 na definição de multigrafo, acima.

Uma aresta é chamada de *aresta ponte* (também conhecida por *aresta de corte* ou *istmo*) se sua remoção aumenta o número de componentes conexas (ver definição acima) do grafo. Exemplo: a aresta latexmath:[$x_1 x_2$] na definição de grafo desconexo, acima.

Dois grafos latexmath:[$G$] e latexmath:[$H$] são idênticos se:

* latexmath:[$V(G) = V(H)$];
* latexmath:[$E(G) = E(H)$];
* latexmath:[$G$] e latexmath:[$H$] têm a mesma sequência de graus.

Note que latexmath:[$(u,v) \in E(G)     \leftrightarrow    (u,v) \in E(H)$]

Grafos idênticos podem estar ``graficamente distorcidos'' e não ser muito fácil de você olhar para eles e logo perceber que são idênticos. Mas ambos podem ser representados por um mesmo diagrama. (Exemplo: os dois grafos abaixo, se já tivéssemos mudado os rótulos dos vértices do segundo grafo de 1,2,3,4,5,6,7,8 para a,h,d,i,g,b,j,c, respectivamente.)

Um *isomorfismo* (denotado latexmath:[$G \approx H$]) entre dois grafos latexmath:[$(G,H)$] é uma bijeção latexmath:[$f$] de latexmath:[$V(G)$] em latexmath:[$V(H)$] tal que 

[latexmath]
++++
\[(u,v) \in E(G)      \leftrightarrow      (f(u),f(v)) \in E(H) \]
++++

isto é, para quaisquer dois vértices latexmath:[$u$] e latexmath:[$v$] de latexmath:[$G$], eles são adjacentes em latexmath:[$G$] se e somente se latexmath:[$f(u)$] e latexmath:[$f(v)$] são adjacentes em latexmath:[$H$]. Dois digrafos são *isomórficos* se existe um isomorfismo entre os grafos a eles equivalentes e se é preservada a ordem dos vértices de cada arco.

[width="100%",cols="^.^1,^.^2,^.^2",frame="none",grid="none",options="header"]
|====
|Grafo latexmath:[$G$]	|Grafo latexmath:[$H$] |Um isomorfismo entre latexmath:[$G$] e latexmath:[$H$]
|image:images/cap6/img11.eps[width="60"]
|image:images/cap6/img12.eps[width="130"]
|latexmath:[$f(a) = 1$]

latexmath:[$f(b) = 6$]

latexmath:[$f(c) = 8$]

latexmath:[$f(d) = 3$]

latexmath:[$f(g) = 5$]

latexmath:[$f(h) = 2$]

latexmath:[$f(i) = 4$]

latexmath:[$f(j) = 7$]
|====

Compare esta definição com a de grafos idênticos. Obviamente, grafos idênticos são isomórficos. No entanto, o reverso não é verdade. (No exemplo acima, é possível alterar o nome dos vértices do grafo H de forma que este fique idêntico a latexmath:[$G$], mas isso nem sempre é possível. Exemplo: grafo latexmath:[$G = \{(1,2),(1,3),(1,4),(2,3)\}$] e grafo latexmath:[$H = \{(1,2),(1,3),(2,3),(3,4)\}$]. Desenhe os diagramas dos dois grafos explique porque são isomórficos, e porque não são idênticos.) 

O isomorfismo de grafos preserva as propriedades:

* Simetria: latexmath:[$G \approx H    \leftrightarrow     H \approx G$]
* Reflexividade: latexmath:[$G \approx G$]
* Transitividade: latexmath:[$(G \approx H) \wedge (H \approx I)    \leftrightarrow    (G \approx I)$]

Se latexmath:[$G \approx H$], valem as seguintes proposições:

* G e H têm o mesmo número de vértices
* G e H têm o mesmo número de arestas
* G e H têm a mesma sequência de graus

* *Grafo direcionado* ou *digrafo* footnote:[pronuncia-se di-GRA-fo, pois não há acento. Alguns descuidados escrevem  e pronunciam como ``dígrafo'', com acento, o que é erro pois corresponde ao conceito ``duas letras com apenas um só fonema, como ss entre duas vogais'', enquanto ``digrafo'' é aportuguesamento do inglês ``digraph'' (``directed graph'', ``grafo direcionado'')] é aquele que tem todas sua arestas direcionadas. Prefere-se chamar de arcos as arestas direcionadas, e de A o conjunto desses arcos. Cada arco é representado por um par ordenado, onde o primeiro elemento é a origem do arco e segundo é seu final. No exemplo abaixo, 

latexmath:[$G = (V,A)$] +
latexmath:[$V = \{2,3,5,7,8,9,10,11\}$] +
latexmath:[$A = \{(3,8), (3,10), (5,11), (7,8), (7,11), (8,9), (11,2), (11,9), (11,10)\}$]. 

* *Digrafo simples* é um digrafo que não tem auto-laços e os arcos são todos distintos. (Exemplo acima.) 
* Digrafo simples *acíclico* é um digrafo simples que não tem ciclos. (Exemplo acima.)
* O grafo latexmath:[$G$] obtido removendo-se as orientações dos arcos de um digrafo latexmath:[$D$] é chamado de grafo equivalente a latexmath:[$D$]. Se latexmath:[$D$] for simples, latexmath:[$G$] pode não o ser. (Você mesmo ache um exemplo disso.)

Cada vértice latexmath:[$v$] de um digrafo latexmath:[$(V,A)$] tem um grau de entrada latexmath:[$grauent(v)$] ou latexmath:[$grau^{+}(v)$]((que é o número de arcos que chegam nele) e um grau de saída latexmath:[$grausai(v)$] ou latexmath:[$grau^{-}(v)$] (que é o número de arcos que saem dele), onde: 

[latexmath]
++++
\[\sum{grauent(v_i)} = \sum{grausai(v_i)} = |A|\]
++++

* Um digrafo latexmath:[$D$] é chamado de *fracamente conectado* (ou apenas *conectado*) se o grafo equivalente é um grafo conexo. Um digrafo é *fortemente conectado* ou *forte* se ele tem um caminho orientado de latexmath:[$u$] a latexmath:[$v$] e um caminho orientado de latexmath:[$v$] a latexmath:[$u$] para cada par de vértices latexmath:[$u,v$].

{zwsp} +
*Representação de grafos em computadores:*

[width="100%",cols="^.<3a,<.^5",frame="none",options="header"]
|====
^.^|image:images/cap6/img02.eps[width="80"] ^.^|Representação no computador:
|     A   B   C   D
 A   0   2   2   1
 B   2   0   0   1
 C   2   0   0   1
 D   1   1   1   0
|*Matriz de adjacência* (latexmath:[$V \times V$]): as linhas e as colunas estão associadas aos vértices. O elemento da linha latexmath:[$i$] e coluna latexmath:[$j$] é o número de arestas ligando latexmath:[$v_i$] a latexmath:[$v_j$]. A matriz é simétrica (só a triangular superior precisa ser armazenada). Se não há auto-laços, a diagonal principal só tem 0’s. Se, ademais, não há arestas paralelas (o grafo é direto), a matriz só tem 0’s e 1’s.
|    a  b  c  d  e  f  g
 A  1  1  1  1  1  0  0
 B  1  1  0  0  0  1  0
 C  0  0  1  1  0  0  1
 D  0  0  0  0  1  1  1
|*Matriz de incidência* (latexmath:[$V \times E$]): as linhas estão associadas aos vértices e as colunas estão associadas às arestas. Chamemos de latexmath:[$m_{ij}$] ao elemento da linha latexmath:[$i$] e coluna latexmath:[$j$]. latexmath:[$m_{ij}$] é o número de vezes que latexmath:[$v_i$] e latexmath:[$e_j$] são incidentes.
<.^|latexmath:[$Adj[A\]: C \rightarrow C \rightarrow B \rightarrow B \rightarrow D \searrow$]

latexmath:[$Adj[B\]: A \rightarrow A \rightarrow D \searrow$]

latexmath:[$Adj[C\]: A \rightarrow A \rightarrow D \searrow$]

latexmath:[$Adj[D\]: A \rightarrow B \rightarrow C \searrow$]
|*Listas de Adjacência* (latexmath:[$V \times V*$]): um array latexmath:[$Adj$] de latexmath:[$\vert V \vert$] listas, uma para cada vértice de latexmath:[$V$]. Para cada latexmath:[$v$] em latexmath:[$V$], latexmath:[$Adj[v\]$] consiste da lista (em ordem arbitrária?) de todos os vértices adjacentes a latexmath:[$v$].
|====

{zwsp} +
*Representação de digrafos em computadores:*

[width="100%",cols="^.<a, <.^", frame="none",options="header"]
|====
^.^|image:images/cap6/img13.eps[width="100"] ^.^|Representação no computador 
| 2  3  5  7  8  9 10 11 
 2  0  0  0  0  0  0  0 -1
 3  0  0  0  0  1  0  1  0
 5  0  0  0  0  0  0  0  1
 7  0  0  0  0  1  0  0  1
 8  0 -1  0 -1  0  1  0  0
 9  0  0  0  0 -1  0  0 -1
 10 0 -1  0  0  0  0  0 -1
 11 1  0 -1 -1  0  1  1  0
|*Matriz de adjacência* (latexmath:[$V \times V$]): as linhas (``De'') e as colunas (``Para'') estão associadas aos vértices. latexmath:[$m(v_i,v_j) = 1$] se há aresta de latexmath:[$v_i$] para latexmath:[$v_j$]; latexmath:[$m(v_i,v_j) = -1$] se há aresta de latexmath:[$v_j$] para latexmath:[$v_i$]; latexmath:[$m(v_i,v_j) = 0$] no caso restante. 
<.^|latexmath:[$Adj[2\]:  \searrow$]

latexmath:[$Adj[3\]:  8 \rightarrow 10 \searrow$]

latexmath:[$Adj[5\]:  11 \searrow$]

latexmath:[$Adj[7\]:  8 \rightarrow 11\searrow$]

latexmath:[$Adj[8\]:  9\searrow$]

latexmath:[$Adj[9\]:  \searrow$]

latexmath:[$Adj[10\]: \searrow$]

latexmath:[$Adj[11\]: 2 \rightarrow 9 \rightarrow 10\searrow$]
|*Listas de Adjacência* (latexmath:[$V \times V*$]): um array latexmath:[$Adj$] de latexmath:[$\vert V \vert$] listas, uma para cada vértice de latexmath:[$V$]. Para cada latexmath:[$v$] em latexmath:[$V$], latexmath:[$Adj[v\]$] consiste da lista (em ordem arbitrária?) de todos os vértices adjacentes a latexmath:[$v$] no sentido da seta do arco.
|====

* Um grafo latexmath:[$H$] é um *subgrafo* de latexmath:[$G$] (latexmath:[$H \subseteq G$]) se latexmath:[$V(H) \subseteq V(G)$] e latexmath:[$E(H)\subset E(G)$].
* Quando latexmath:[$H \subseteq G$] e latexmath:[$H \not= G$], denotamos latexmath:[$H \subseteq G$] e dizemos que latexmath:[$H$] é *subgrafo próprio* de latexmath:[$G$].Se latexmath:[$H$] é um subgrafo de latexmath:[$G$] então latexmath:[$G$] é um *supergrafo* de latexmath:[$H$]
* Um *subgrafo gerador* de latexmath:[$G$] é um subgrafo latexmath:[$H$] com latexmath:[$V(H) = V(G)$]
* Seja latexmath:[${V}'$] um subconjunto não vazio de latexmath:[$V$]. O subgrafo de latexmath:[$G$] cujo conjunto de vértices é latexmath:[${V}'$] e o conjunto de arestas é o conjunto de todas as arestas de latexmath:[$G$] com ambos extremos em latexmath:[${V}'$], é chamado de *subgrafo de latexmath:[$G$] induzido pelo conjunto de vértices latexmath:[${V}'$] *. Denotamos por latexmath:[$G[{V}'\]$] o subgrafo induzido de latexmath:[$G$] por latexmath:[${V}'$].
* Seja latexmath:[${E}'$] um subconjunto não vazio de arestas de latexmath:[$E$]. O subgrafo de latexmath:[$G$] cujo conjunto de vértices é o conjunto dos extremos das arestas em latexmath:[${E}'$] é chamado de *subgrafo de latexmath:[$G$] induzido pelo conjunto de arestas latexmath:[${E}'$]*.

* latexmath:[$G[V \setminus {V}'\]$], também denotado por latexmath:[$G-{V}'$] , é o subgrafo obtido a partir de latexmath:[$G$] pela remoção dos vértices em latexmath:[${V}'$] e suas arestas incidentes.
* latexmath:[$G-{E}'$] é o subgrafo gerador de latexmath:[$G$] com conjunto de arestas latexmath:[$E \setminus {E}'$].
* latexmath:[$G+{E}'$] é o grafo obtido a partir de latexmath:[$G$] adicionando um conjunto de arestas latexmath:[${E}'$].
* Sejam os subgrafos latexmath:[$G_1, G_2 \subseteq G$]. latexmath:[$G_1$] e latexmath:[$G_2$] são *disjuntos (em vértices)* se latexmath:[$V(G_1) \cap V(G_2) = \emptyset$]. E são *disjuntos (em arestas)* se latexmath:[$E(G_1) \cap E(G_2) = \emptyset$].

.Guia de Estudo
[NOTE]
====

* No diagrama da definição do ``problema do caminho mais curto'' (abaixo): Quais são os vértices? E as arestas? Quais os extremos da aresta
 de maior peso? Que vértices incidem nessa aresta? Que vértices são adjacentes via essa aresta? Que arestas incidem no vértice latexmath:[$A$]? Que arestas são adjacentes via esse vértice? Este é um multigrafo? Tem algum auto-laço? Tem arestas paralelas? É um grafo simples? É
 finito? Qual é a ordem do grafo? Qual o grau do vértice latexmath:[$A$]? Qual o grau mínimo de latexmath:[$G$]? Qual o grau máximo de latexmath:[$G$]? Há algum vértice isolado? Há algum vértice folha? Quais são os vizinhos do vértice latexmath:[$A$]? Os vértices latexmath:[$A$] e latexmath:[$D$] são independentes ou vizinhos? As arestas de maior e de menor peso são independentes ou adjacentes? Sendo este um 
 grafo simples, vale o teorema que diz que a soma dos graus dos vértices é o dobro do número das arestas?
* Desenhe um grafo completo com 6 nodos e verifique se o número de arcos é latexmath:[$(6+1) \cdot 6/2 = 21$] Desenhe um grafo 4-partido. 
Desenhe um grafo 2-regular com 6 vértices. Desenhe um grafo conexo. Desenhe um grafo com 2 partições desconexas. Insira um vértice no grafo 
acima, depois acrescente o menor número de arestas que o torne conexo. Aponte um vértice de corte e uma aresta ponte, no grafo modificado.
* Dê exemplo de dois grafos idênticos, mas um pouco difíceis de reconhecer isto à primeira vista.
* Desenhe 2 grafos não idênticos mas isomórficos, depois prove que realmente são isomórficos.
* Dê exemplo de um digrafo que seja cíclico, outro que seja acíclico.
* Dê exemplo de um digrafo conexo, outro de um desconexo. Escreva a matriz de adjacência e a lista de adjacência para o digrafo desconexo.
* Divida um grafo de 7 vértices em latexmath:[$G$], com 4 vértices, e latexmath:[$H$], com 3 vértices, podendo ter uma pequena interseção 
entre eles. Agora, ache latexmath:[$G-H$].

====

=== Percursos em Grafos em Geral e em Cliques

* Um *passeio* (walk) é uma sequência qualquer de arestas (arcos) adjacentes que ligam dois vértices latexmath:[$v_0$] e latexmath:[$v_k$]. (Há uma sequência não nula latexmath:[$W=v_0 e_1 v_1 e_2 v_2 \cdots e_k v_k$] cujos termos são alternadamente vértices e arestas). (Note que não se proibiu passar mais de 1 vez pelo mesmo vértice). (Exemplo no grafo das 7 pontes de Konigsberg: latexmath:[$AcCdAbBbAeD$] é um passeio desde latexmath:[$A$] até latexmath:[$D$].) 
* Um *ciclo* é um passeio simples e fechado (o vértice inicial é o mesmo que o vértice final). (Exemplo no mesmo grafo: latexmath:[$AcCdAbBbA$] é um ciclo desde latexmath:[$A$] até latexmath:[$A$].)
* Um passeio é dito ser *elementar* se não passa duas vezes pelo mesmo vértice (Exemplo no mesmo grafo: latexmath:[$AcCgDfB$] é um passeio elementar desde latexmath:[$A$] até latexmath:[$B$].)
* Um passeio é dito ser *simples* (*trilha*) se não passa duas vezes pela mesma aresta. (Exemplo no mesmo grafo: latexmath:[$AaBfDeAcCgD$] é uma trilha desde latexmath:[$A$] até latexmath:[$D$]. Note que passou 2 vezes pelos vértices latexmath:[$A, D$].)
* Em um digrafo, um *caminho* é um passeio no qual todos os arcos possuem a mesma orientação. (Exemplo no diagrama da definição de digrafo: 5, arco, 11, arco, 10) Um caminho não repete vértices nem arcos. Em um grafo não direcionado, a relação caminho é uma equivalência, pois é reflexiva (caminho(u,u)), simétrica (caminho(u,v) ssse caminho(v,u)) e transitiva (caminho(x,y) e caminho(y,z) implicam caminho(x,z)).
* Em um digrafo, um circuito (ou ciclo direcionado simples) é um caminho simples (isto é, sem subcircuitos dentro dele) e fechado, retornando a qualquer vértice por onde o comecemos. (Exemplo: no grafo abaixo, um circuito passará pelos vértices 1,2,4,3 e voltará ao vértice 1, sempre seguindo os arcos na direção correta.)

image::images/cap6/img14.eps[scaledwidth="30%"]

* Um grafo conectado latexmath:[$G(V,A)$] é dito ser *euleriano* se existe um ciclo que contém todas as arestas de latexmath:[$G$]. 
** *Exemplo:* Cada vértice do grafo ao lado tem um grau par, portanto este é um grafo euleriano; realmente, seguindo as arestas em ordem alfabética obtém-se um circuito/ciclo euleriano. 
** *Exemplo:* No clique latexmath:[$k5$] do Teorema de Ore (abaixo), se numerarmos os vértices como 1,2,3,4,5 no sentido dos ponteiros do relógio, o ciclo euleriano será 1,2,3,4,5,1,3,5,2,4,1.)

image::images/cap6/img15.eps[scaledwidth="40%"]

* Um grafo conectado e não-euleriano, latexmath:[$G$], é *semi-euleriano* se existe um passeio simples contendo todas as arestas de latexmath:[$G$]. No grafo ao lado, se seguirmos as arestas na ordem 1,2,3,4,5,6,7, teremos passado por todas as arestas, portanto o grafo é semi-euleriano. Mas não fizemos um circuito, pois passamos mais de 1 vez em alguns vértices. Na verdade, o grafo não é euleriano.

image::images/cap6/img16.eps[scaledwidth="40%"]

Teorema (Euler 1736) (pronuncie como ``Óilêr'')::  Um grafo conectado latexmath:[$G$] é euleriano se e somente se o grau de cada um de seus vértices é par.
Corolário::: Um grafo conectado latexmath:[$G$] é euleriano se e somente se ele pode ser decomposto em ciclos.
Corolário II::: Um grafo conectado latexmath:[$G$] é semi-euleriano se e somente se ele possui exatamente 2 vértices de grau ímpar.

Teorema:: Um grafo completo de latexmath:[$n$] vértices tem latexmath:[$(n-1)!/2$] ciclos hamiltonianos.

.{zwsp}
[NOTE]
====
Um grafo latexmath:[$G(V,A)$] é dito ser hamiltoniano se existe um ciclo que passa exatamente uma vez em cada um dos vértices de latexmath:[$G$]. (O ciclo é uma sucessão de arestas adjacentes que visita todos os vértices do grafo uma só vez, sendo o último vértice visitado adjacente ao primeiro.)

Todo grafo completo (clique) que contém mais de 2 vértices é hamiltoniano.

image::images/cap6/img17.eps[scaledwidth="40%"]
====

Prova do Teorema:: Fixe um vértice latexmath:[$v_1$]. O número de ciclos hamiltonianos começando e terminando nele (por exemplo, latexmath:[$v_1 v_2 \cdots v_n v_1$]) é o número de permutações com os latexmath:[$n-1$] outros vértices latexmath:[$\{v_2, \ldots ,v_n\}$], portanto é latexmath:[$(n-1)!$] Mas cada ciclo está sendo percorrido em 2 sentidos, direto e inverso (e.g.: 1234561 e 1654321), portanto, corrigindo, há latexmath:[$(n-1)!/2$] ciclos hamiltonianos começando e terminando em latexmath:[$v_1$]. Mas, por causa da circularidade (123451 é o mesmo que 234512 que é o mesmo que 3451234 que é o mesmo que ...), todos os ciclos começando e terminando em qualquer dos outros vértices diferentes de latexmath:[$v_1$] já estão contados. Portanto, o número de ciclos hamiltonianos é latexmath:[$(n-1)! / 2$].

Algoritmos fáceis para determinar o circuito hamiltoniano de menor custo num grafo ponderado (problema do caixeiro viajante, TSM, TSP):

* *Alg. Força Bruta:* Ache todos os possíveis ciclos Hamiltonianos no grafo, encontre o peso total de cada um, forme uma lista de todos os circuitos e seus pesos totais, e escolha o melhor. Exato, mas leva um tempo impraticável.
* *Alg. Cidade (ou vizinho) Mais Próxima:* O vendedor escolhe um vértice de partida, e forma um circuito que começa e termina nele e sempre, à medida que visitava vértices, sempre escolheu a aresta de menor peso que saia do vértice que estivesse em foco, tendo o cuidado de nunca visitar um vértice duas vezes até que tenha visitado todos eles. Isso é rápido e fácil, e geralmente dá uma solução que é muito boa, embora não garanta que é a ótima.
* *Alg. Arestas Ordenadas (de menor a maior):* nesta ordem, ``agarre'' as arestas até que você tenha um circuito completo. A vantagem é que você pegará sempre a aresta com o menor peso que ainda não tinha sido agarrada, tendo cuidado para que o agarrar não irá formar um circuito que não passa por todos os vértices ou causará um vértice ser tocado por uma terceira aresta. Como o algoritmo de vizinho mais próximo, isso é rápido e fácil, e geralmente dá uma solução que é muito boa, embora não garanta que é a ótima.

.{zwsp}
[NOTE]
====
Um grafo latexmath:[$G(V,A)$] é dito ser *semi-hamiltoniano* se não é hamiltoniano e existe um passeio que passa exatamente uma vez em cada um dos vértices de latexmath:[$G$].

image::images/cap6/img18.eps[scaledwidth="40%"]
====

Teorema (Dirac 1952):: Uma condição suficiente, mas não necessária, para que um grafo simples latexmath:[$G$] com latexmath:[$n (>2)$] vértices seja hamiltoniano é que o grau de todo vértice de latexmath:[$g$] seja latexmath:[$\geq n/2$].

image::images/cap6/img19.eps[scaledwidth="40%"]

Teorema (Ore 1960):: Uma condição suficiente, mas não necessária, para que um grafo simples latexmath:[$G$] com latexmath:[$n (>2)$] vértices seja hamiltoniano é que a soma dos graus de cada par de vértices não adjacentes seja no mínimo latexmath:[$n$].
Exemplo::: a condição é satisfeita no clique latexmath:[$k5$] ao lado. E, se numerarmos os vértices como 1,2,3,4,5 no sentido dos ponteiros do relógio, o ciclo será 1,2,3,4,5,1.

image::images/cap6/img20.eps[scaledwidth="40%"]

O problema do caminho mais curto:: consiste na minimização do custo total de travessia de um grafo ponderado (com custos associados a cada aresta) desde um vértice origem até um vértice destino. Se for oferecida como optativa a disciplina Análise (da complexidade) e Projeto de Algoritmos (do Bacharelado em Ciência da Computação, da UFPB), você poderá aprender e implementar algoritmos (tais como o de Dijkstra e o de Bellman-Ford) que resolvem o problema de forma muito eficiente.
Exemplo::: ao lado, o caminho de custo mínimo entre latexmath:[$D$] e latexmath:[$E$] não é latexmath:[$D-E$], mas sim latexmath:[$D-F-E$], com uma custo total de latexmath:[$6+8 = 14$].

image::images/cap6/img21.eps[scaledwidth=30%"]

O problema do carteiro chinês:: consiste em encontrar um caminho mais curto ou um circuito fechado que, pelo menos uma vez, visite cada aresta de um grafo conectado. (Sim, quando o grafo possui um circuito euleriano (um passeio fechado que abrange toda aresta uma vez), esse circuito é uma solução ótima.)
Exemplo::: Grafo não direcionado. Você tem 4 vértices 1,2,3,4. Os arcos, não direcionados, têm comprimentos:    latexmath:[$(1,2) = 3;    (1,3) = 12;    (1,4) = 10;    (2,3) = 4;    (3,4) = 5$].    Desenhe o grafo. O carteiro precisa sair do vértice 1 e voltar a ele no final, passando por cada arco pelo menos 1 vez. Qual o passeio de menor comprimento total?   (Resposta: passar nos vértices 1,2,3,4,1,2,3,2,1, percorrendo latexmath:[$12+5+10+3+4+4+3 = 41$] unidades de comprimento).

O problema do caixeiro viajante:: (TSM = Travelling SalesMan; TSP = Travelling Sales Person) consiste na procura de um circuito que possua o menor comprimento total, começando numa cidade qualquer, entre várias, visitando cada cidade precisamente uma vez e regressando à cidade inicial. Ver algoritmo aproximado, acima.

=== Árvores e Árvores Geradoras

Um grafo conexo que não contém ciclos é chamado de árvore. Um grafo que não contém ciclos é uma floresta (portanto, uma floresta é uma união disjunta de árvores; e corresponde a um grafo disjunto; note que estamos falando de grafos (não de digrafos), portanto as arestas não são direcionadas). 

Seguindo o costume, chamaremos de nodos aos vértices de uma árvore. Uma árvore é denominada enraizada se um nodo é escolhido como especial, passando a ser chamado de raiz da árvore. Uma árvore que não é enraizada é denominada livre. Os nodos vizinhos à raiz são chamados de seus filhos ou ramos, e ela chamada de pai deles. Estes filhos levam a outros nodos que também possuem outros filhos deles, que os têm por pais. E assim por diante. Os nodos que não possuem filhos são conhecidos como folhas (nomenclatura melhor que nodos- terminais). Para cada folha, existe um só caminho entre a raiz e ela.

Teorema:: Num grafo que é uma árvore, toda sua aresta é uma aresta de corte   (ver definição, acima).

Teorema:: Se latexmath:[$G$] é uma árvore com latexmath:[$n$] nodos, então latexmath:[$G$] possui latexmath:[$n-1$] arestas.

Teorema:: Se latexmath:[$F$] é uma floresta com latexmath:[$n$] nodos e latexmath:[$k$] componentes conexos, então latexmath:[$F$] contém 
latexmath:[$n-k$] arestas.

Teorema:: Seja latexmath:[$G$] um grafo de ordem latexmath:[$n$]. latexmath:[$G$] é uma árvore se, e somente se, latexmath:[$G$] é conexo e contém latexmath:[$n-1$] arestas.

Teorema:: Seja latexmath:[$G$] um grafo de ordem latexmath:[$n$]. latexmath:[$G$] é uma árvore se, e somente se, latexmath:[$G$] não possui ciclos e contém latexmath:[$n-1$] arestas.

Teorema:: Seja latexmath:[$T$] uma árvore (enraizada) de ordem latexmath:[$n \geq 2$]. Então latexmath:[$T$] possui no mínimo 1 folha.

Dado um grafo conexo latexmath:[$G$], podemos sucessivamente remover uma qualquer aresta que esteja em um ciclo, até que não mais reste nenhum ciclo. Deste modo, teremos removido o menor número de arestas (latexmath:[$|E| - |V| + 1$]) necessário para transformar o grafo em acíclico e, portanto (uma vez que também é conexo), em uma árvore que contém todos os vértices de latexmath:[$G$] e será chamada de *árvore geradora* (ou árvore extensora, ou árvore de cobertura) de latexmath:[$G$]. Muitas árvores diferentes (e não serão isomórficas) podem ser geradoras de um mesmo grafo. Se o grafo for ponderado (cada aresta tendo um peso que representa quão desfavorável ela é), e se atribuirmos um peso à árvore geradora que seja calculado pela soma dos pesos das arestas que a compõem, então uma *árvore geradora mínima* (ou de peso total mínimo, ou de custo mínimo) é uma árvore geradora com peso menor ou igual a cada uma de todas as outras árvores geradoras possíveis. Qualquer grafo tem uma *floresta de árvores mínimas*, que é uma união de árvores geradoras mínimas de cada uma de suas componentes conexas.

image::images/cap6/img22.eps[scaledwidth="40%"]

Neste grafo, um peso aproximadamente igual ao seu comprimento foi atribuído a cada aresta. Uma árvore geradora mínima deste grafo está em negrito.

{zwsp} +
*Algoritmo de Kruskal* (não vamos exigi-lo nos exames) para geração da árvore geradora mínima para um grafo:

 enquanto for possível: 
        escolha uma aresta de menor peso que ainda resteno grafo e não forme um ciclo na árvore, e passe tal aresta, com seus vértices, para a árvore.

.{zwsp}
====
Na figura acima, escolha a aresta de peso 1, depois uma das duas arestas de peso 2, depois a outra aresta de peso 2, depois uma das de peso 3, depois a outra de peso 3. Agora, se você tentar escolher a aresta de peso 4 a NordEste, não poderá, pois fechará um ciclo; idem para a aresta de peso 4 a Oeste. Portanto, escolha a de peso 4 que fica no Norte. Neste ponto, você não poderá escolher nenhuma das arestas de peso 5 e 6, porque fechariam ciclos. Escolha a aresta de peso 7. Depois, escolha uma das arestas de peso 8, depois a outra. Agora, você será forçado a parar.
====

=== Atividades

NOTE: resolva os exercícios abaixo, sem olhar as respostas. Só depois compare sua resposta com a deste livro (adaptei a partir de http://christopherstrobel.cmswiki.wikispaces.net/file/view/Test%20Review%20Answer%20Key%20(Spring%202012).docx  )

. Utilize o algoritmo de força bruta para resolver o problema do caixeiro viajante para o grafo das quatro cidades mostradas abaixo. 
+
[width="100%", cols="^.^",frame="none",grid="none"]
|====
|image:images/cap6/img23.eps[width="150"]
|====
. Pode um grafo ter um circuito euleriano , mas não um hamiltoniano? Explique sua resposta. 
. Pode um grafo ter um circuito hamiltoniano, mas não um euleriano ? Explique sua resposta.
. No grafo abaixo, coloque em negrito arestas para indicar um circuito hamiltoniano.  
+
[width="100%", cols="^.^",frame="none",grid="none"]
|====
|image:images/cap6/img26.eps[width="130"]
|====
. Qual é o grau (ou valência) do vértice A no grafo abaixo? 
+
[width="100%", cols="^.^,<.^", frame="none", grid="none"]
|====
.4+|image:images/cap6/img28.eps[width="150"]
|a)	3 
|
|b)	4 
|
|c)	5 
|
|d)	6
|====
. Qual das seguintes afirmações sobre um grafo conexo sempre é verdade? 
+
[width="100%",cols="<,<",frame="none",grid="none"]
|====
|a) Cada par de vértices é ligado por uma única aresta.
|b)	Um caminho de arestas existe entre quaisquer dois vértices do gráfico.
||
|c)	Há um número par de vértices do gráfico.
|d)	Há um número par de arestas no gráfico.
|====
. Qual dos grafos à abaixo tem um circuito euleriano? 
+
[width="100%",cols="^.^,<.^",frame="none",grid="none"]
|====
.4+|image:images/cap6/img29.eps[width="160"]
|a)	Grafo I, pois há um número par de arestas em cada um de todos os seus nodos.
|
|b)	Grafo II, pois há um número par de arestas em cada um de todos os seus nodos.
|
|c)	Ambos I e II  
|
|d)	Nem I nem II 
|====
. Considere o caminho representado pela sequência de arestas numerados no gráfico seguinte. Por que o caminho não representa um circuito de Euler (pronuncie como ``Óilêr'')? 
+
[width="100%", cols="^.^,<.^",frame="none",grid="none"]
|====
.4+|image:images/cap6/img30.eps[width="160"]
|a)	O caminho não inicia e para no mesmo vértice.
|
|b)	O caminho não cobre todas as bordas do gráfico.
|
|c)	O caminho utiliza algumas arestas mais do que uma vez.
|
|d)	O caminho não toca cada vértice do gráfico.
|====
. Se um gráfico tem 8 vértices de grau (valência) ímpar, qual é o número mínimo de arestas que têm de ser adicionadas (ou duplicadas) para que o grafo se transforme num euleriano ? 
+
[width="100%", cols="<,<,<,<",frame="none",grid="none"]
|====
|a)	2 |b)	4 |c)	6 |d)	8 
|====
. Quais das seguintes sequências de letras descreve um circuito hamiltoniano para o grafo abaixo? 
+
[width="100%", cols="^.^,<.^",frame="none",grid="none"]
|====
.4+|image:images/cap6/img31.eps[width="130"]
|a)	latexmath:[$ABCDEFGA$]
| 
|b)	latexmath:[$ACBAEGFDEA$] 
|
|c)	latexmath:[$ACBFGDEA$] 
|
|d)	latexmath:[$ABCDGEF$] 
|====
. Para o grafo abaixo, qual é o custo do circuito hamiltoniano obtido usando o algoritmo do vizinho mais próximo (ainda não visitado), começando por latexmath:[$A$]? 
+
[width="100%", cols="^.^,<.^",frame="none",grid="none"]
|====
.4+|image:images/cap6/img32.eps[width="160"]
|a)	60 
|
|b)	54 
|
|c)	62 
|
|d)	66
|====
. Para o problema do caixeiro viajante (TSM ou TSP) (circuito hamiltoniano) aplicado a seis cidades, quantas tours são possíveis (e quantas são únicas)? 
+
[width="100%", cols="<,<,<,<",frame="none",grid="none"]
|====
|a)	60 possíveis
|b)	120 possíveis
|c)	360 possíveis
|d)	720 possíveis
|====
. Para o grafo abaixo, qual é o custo do circuito hamiltoniano obtido pelo algoritmo obtido usando o algoritmo das arestas ordenadas. 
+
[width="100%", cols="^.^,<",frame="none",grid="none"]
|====
.4+|image:images/cap6/img33.eps[width="160"]
|a)	220 
|
|b)	225 
|
|c)	235 
|
|d)	295 
|====
. (Não vamos exigir isso nos exames) Use o algoritmo de Kruskal para achar a árvore geradora mínima para o grafo abaixo. O custo da árvore encontrada é: 
+
[width="100%", cols="^.^,<",frame="none",grid="none"]
|====
.4+|image:images/cap6/img34.eps[width="120"]
|a)	5 
|
|b)	9 
|
|c)	12 
|
|d)	15 
|====
. (Não vamos exigir isso nos exames) Use o algoritmo de Kruskal para achar a árvore geradora mínima para o grafo abaixo. O custo da árvore encontrada é: 
+
[width="100%", cols="^.^,<",frame="none",grid="none"]
|====
.4+|image:images/cap6/img35.eps[width="130"]
|a)	22 
|
|b)	28 
|
|c)	32 
|
|d)	49 
|====
. Um grafo latexmath:[$G$] tem 100 vértices e é formado por duas componentes conexas, cada uma delas sendo um grafo completo. Qual o menor número de arestas que latexmath:[$G$] pode ter?

=== Soluções

. Caminhos ABCDA e ACBDA têm custo 155.  Caminho ABDCA tem o mínimo custo, 120. 
. Sim. Por exemplo, o grafo abaixo. 
+
[width="100%", cols="^.^",frame="none",grid="none"]
|====
|image:images/cap6/img24.eps[width="100"]
|====
. Sim. Por exemplo, o grafo abaixo. 
+
[width="100%", cols="^.^",frame="none",grid="none"]
|====
|image:images/cap6/img25.eps[width="100"]
|====
. {zwsp} 
+ 
[width="100%", cols="^.^",frame="none",grid="none"]
|====
|image:images/cap6/img27.eps[width="150"]
|====
. D
. B
. A
. C
. B
. C
. D (corresponde a latexmath:[$AEDCBA: 12+8+10+20+16=66$]) (Note que esta é somente uma resposta aproximada, e o mínimo exato é latexmath:[$ABDCEA = 16+12+10+15+12= 65$])
. A (latexmath:[$60/6 = 10$] únicas)
. C (corresponde a latexmath:[$ACEBDA$])
. B (corresponde a latexmath:[$1+1+2+2+3 = 9$])
. B (corresponde latexmath:[$a: 1+1+2+2+3+3+3+4+4+5 = 28$])
. B (que corresponde a latexmath:[$8+20+15 = 43$] minutos)
. Quando um componente tem latexmath:[$50-y$] vértices, terá latexmath:[$(50-y)(49-y)/2$] arestas, e o outro tem latexmath:[$50+y$] vértices
 e terá latexmath:[$(50+y)(49+y)/2$] arestas, totalizando latexmath:[$2450+y^2$] arestas; quando cada componente tem igual número de 
 vértices, 50, cada um terá latexmath:[$50(50-1)/2 = 50 \cdot 49/2$] arestas, e latexmath:[$G$] terá o dobro disso, *2450*, que será o mínimo desejado.

=== Recapitulando

Parabéns! Você concluiu o capítulo 6, só falta mais um capítulo! E, se você foi disciplinado e realmente ``suou'' estudando 4 a 8 h cada semana, deve ter aprendido muitas coisas da parte básica da ``Teoria dos Grafos'' que lhe serão indispensáveis ou muito úteis em todo o resto do curso e sua vida profissional: conceitos básicos e propriedades de grafos; grafos completos (cliques), bi e k-partidos, regulares, rotulados, valorados, conexos, isométricos; conceitos básicos de digrafos; representações de grafos e digrafos em computadores; passeios, ciclos, trilhas, caminhos, circuitos, grafos eulerianos e hamiltonianos, problemas do caminho mais curto, do carteiro chinês e do caixeiro viajante. Muitas e importantes novidades. Para você treinar ainda melhor, recomendamos a Lista de Exercícios sobre Grafos, Prof. Antonio Alfredo Ferreira Loureiro, http://homepages.dcc.ufmg.br/\~loureiro/md/md_LE9.pdf , com soluções em http://homepages.dcc.ufmg.br/\~loureiro/md/md_LE9_Solucao.pdf.

No próximo (e último!) capítulo, você será introduzido à Teoria dos Números, um assunto teoricamente fascinante e desafiador, e também de importantíssimas aplicações práticas, por exemplo, na área de encriptação e segurança. Estudará propriedades dos números inteiros, particularmente as implicações em testar se um inteiro gigantesco é primo; divisibilidade, fatoração em primos; máximo divisor comum e mínimo múltiplo comum; aritmética modular, classes de equivalência, e congruências; exponenciação rápida; etc. Você vai gostar, e terá terminado de dominar esta disciplina!



////
Sempre termine os arquivos com uma linha em branco.
////


